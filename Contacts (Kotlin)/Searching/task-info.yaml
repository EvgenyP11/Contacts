type: edu
files:
- name: src/Main.kt
  visible: true
  text: |+
    package contacts

    import kotlinx.datetime.*

    open class ActionOnContact {
        var telNumber: String = "[no data]"
            private set(value) {
                field = if (checkPhoneNumber(value) || value == "+(phone)" || value == "+(another)") value
                else "[no number]"
            }
        var timeCreated = "[no data]"
        var timeLastEdit = "[no data]"
        var isPerson = false

        private fun getDateAndTime(): String {
            val currentInstant = Clock.System.now()
            val tz = TimeZone.currentSystemDefault()
            return currentInstant.toLocalDateTime(tz).toString().substringBefore('.')
        }
        fun addTelNumber() {
            print("Enter the number: ")
            telNumber = readln()
        }
        private fun checkPhoneNumber(number: String): Boolean {
            val regex = "[+]?[-|\\s]?(\\d{1,3})?[-|\\s]?([(\\dA-Za-z)]{3,5})?(([-|\\s]?[\\dA-Za-z]{2,4})+)?".toRegex()//"[+]?\\d?[-|\\s]?[(\\dA-Za-z)]{3,5}([-|\\s]?[\\dA-Za-z]{2,4})+".toRegex()
            return regex.matches(number)
        }
        private fun hasNumber(contact: ActionOnContact): Boolean {
            return contact.telNumber != "[no number]"
        }
        fun countContacts(listContacts: MutableList<ActionOnContact>) {
            if (listContacts.isEmpty()) println("The Phone Book has 0 records.")
            else println("The Phone Book has ${listContacts.size} records.")
        }
        fun listContacts(listContacts: MutableList<ActionOnContact>) {
            if (listContacts.isEmpty()) println("The Phone Book has 0 records.")
            else listContacts.forEach {
                print("${listContacts.indexOf(it) + 1}. ")
                println(it.toString())
            }
        }
        fun removeContact(listContacts: MutableList<ActionOnContact>) {
            if (listContacts.isNotEmpty()){
                println("Select a record:")
                listContacts.removeAt(readLine()!!.toInt() - 1)
            } else {
                println("No records to remove!")
                return
            }
        }
        fun editContact(listContacts: MutableList<ActionOnContact>) {
            listContacts(listContacts)
            if (listContacts.isNotEmpty()){
                print("Select a record: ")
                val contact = listContacts[readLine()!!.toInt() - 1]
                if (contact is ContactHuman) {
                    print("Select a field (name, surname, birth, gender, number): ")
                    when(readln()) {
                        "name" -> contact.addName()
                        "surname" -> contact.addSurname()
                        "birth" -> contact.addBirth()
                        "gender" -> contact.addGender()
                        "number" -> contact.addTelNumber()
                    }
                    contact.timeLastEdit = getDateAndTime()
                    println("The record updated!")
                }
                if (contact is ContactCompany) {
                    print("Select a field (address, number): ")
                    when(readln()) {
                        "address" -> contact.addAddress()
                        "number" -> contact.addTelNumber()
                    }
                    contact.timeLastEdit = getDateAndTime()
                }
                println("The record updated!")
            } else {
                println("No records to edit!")
                return
            }
        }
        fun addContactHuman(person: ContactHuman, listContacts: MutableList<ActionOnContact>) {
            person.addName()
            person.addSurname()
            person.addBirth()
            person.addGender()
            person.addTelNumber()
            person.timeCreated = getDateAndTime()
            person.timeLastEdit = getDateAndTime()
            person.isPerson = true
            listContacts.add(person)
            if (hasNumber(person)) println("The record added")
            else {
                println("Wrong number format!")
                println("The record added.")
            }
        }
        fun addContactCompany(company: ContactCompany, listContacts: MutableList<ActionOnContact>) {
            company.addNameCompany()
            company.addAddress()
            company.addTelNumber()
            company.timeCreated = getDateAndTime()
            company.timeLastEdit = getDateAndTime()
            company.isPerson = false
            listContacts.add(company)
            if (hasNumber(company)) println("The record added")
            else {
                println("Wrong number format!")
                println("The record added.")
            }
        }
        fun printHumanOrCompany(index: Int, listContacts: MutableList<ActionOnContact>) {
            if (listContacts[index] is ContactHuman) {
                printHuman(listContacts[index] as ContactHuman)
            }
            if (listContacts[index] is ContactCompany) {
                printCompany(listContacts[index] as ContactCompany)
            }
        }

        private fun printHuman(person: ContactHuman) {
            println("Name: ${person.firstName}")
            println("Surname: ${person.secondName}")
            println("Birth date: ${person.dateOfBirth}")
            println("Gender: ${person.genderOfPerson}")
            println("Number: ${person.telNumber}")
            println("Time created: ${person.timeCreated}")
            println("Time last edit: ${person.timeLastEdit}")
        }
        private fun printCompany(company: ContactCompany) {
            println("Organization name: ${company.nameCompany}")
            println("Address: ${company.addressCompany}")
            println("Number: ${company.telNumber}")
            println("Time created: ${company.timeCreated}")
            println("Time last edit: ${company.timeLastEdit}")
        }
    }

    class ContactHuman: ActionOnContact() {

        var firstName: String = "[no data]"
            set(value) {
                val letter = value.first().toString()
                field = letter.uppercase() + value.removePrefix(letter)
            }
        var secondName: String = "[no data]"
            set(value) {
                val letter = value.first().toString()
                field = letter.uppercase() + value.removePrefix(letter)
            }
        var genderOfPerson = "[no data]"
        var dateOfBirth = "[no data]"




        override fun toString(): String {
            return "$firstName $secondName"
        }

        fun addName() {
            print("Enter the name of the person: ")
            firstName = readln()
        }
        fun addSurname() {
            print("Enter the surname of the person: ")
            secondName = readln()
        }
        fun addGender() {
            print("Enter the gender (M, F): ")
            val input = readln()
            genderOfPerson = input.ifEmpty {
                println("Bad gender!")
                "[no data]"
            }
        }
        fun addBirth() {
            print("Enter the birth date: ")
            val input = readln()
            dateOfBirth = input.ifEmpty {
                println("Bad birth date!")
                "[no data]"
            }
        }


    }

    class ContactCompany: ActionOnContact() {
        var nameCompany = "no data"

        var addressCompany = "no data"

        override fun toString(): String {
            return nameCompany
        }

        fun addNameCompany() {
            print("Enter the organization name: ")
            nameCompany = readln()
        }
        fun addAddress() {
            print("Enter the address: ")
            addressCompany = readln()
        }

    }

    fun main() {
        val notebookContact = mutableListOf<ActionOnContact>()
        while (true) {
            val action = ActionOnContact()
            val person = ContactHuman()
            val company = ContactCompany()
            println()
            print("Enter action (add, remove, edit, count, info, exit): ")
            when(readln()) {
                "exit" -> break
                "add" -> {
                    print("Enter the type (person, organization): ")
                    when(readln()) {
                        "person" -> action.addContactHuman(person, notebookContact)
                        "organization" -> action.addContactCompany(company, notebookContact)
                    }
                }
                "remove" -> action.removeContact(notebookContact)
                "edit" -> action.editContact(notebookContact)
                "count" -> action.countContacts(notebookContact)
                "info" -> {
                    action.listContacts(notebookContact)
                    print("Enter index to show info: ")
                    val index = readln().toInt() - 1
                    action.printHumanOrCompany(index, notebookContact)
                }
            }
        }
    }

  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.List;\nimport\
    \ java.util.function.Function;\n\n\nclass TestClue {\n\n    Function<String, CheckResult>\
    \ callback;\n\n    TestClue(Function<String, CheckResult> callback) {\n      \
    \  this.callback = callback;\n    }\n}\n\n\npublic class ContactsTest extends\
    \ StageTest<TestClue> {\n\n    private CheckResult splitActionsFeedback(int actualSize,\
    \ int needSize) {\n        if (actualSize < needSize) {\n            return CheckResult.wrong(String.format(\"\
    This test should contain at least %d actions, but you have only %d. \" +\n   \
    \                         \"You should separate your actions with an empty line.\"\
    ,\n                    needSize,\n                    actualSize));\n        }\
    \ else {\n            return null;\n        }\n    }\n    \n    @Override\n  \
    \  public List<TestCase<TestClue>> generate() {\n        return List.of (\n  \
    \          new TestCase<TestClue>()\n                .setInput(\"exit\")\n   \
    \             .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    enter action\")) {\n                        return new CheckResult(false,\n  \
    \                          \"No \\\"Enter action\\\" substring found in the output\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"count\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    0 records\")) {\n                        return new CheckResult(false,\n     \
    \                       \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"count\\n\"\
    \ +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (output.contains(\"0 records\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Can't add the person\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ [no data]\")\n                                && infoBlock.contains(\"Number:\
    \ 123 456 789\")\n                                && infoBlock.contains(\"Time\
    \ created:\")\n                                && infoBlock.contains(\"Time last\
    \ edit:\")) {\n                            return CheckResult.correct();\n   \
    \                     }\n                    }\n                    return new\
    \ CheckResult(false,\n                            \"Something wrong with printing\
    \ user info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n\n                    for (String\
    \ infoBlock : blocks) {\n                        if (infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St. 1\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Something wrong with printing\
    \ organization info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"list\\n\" +\n                    \"1\\n\" +\n               \
    \     \"edit\\n\" +\n                        \"gender\\n\" +\n               \
    \         \"M\\n\" +\n                    \"menu\\n\" +\n                    \"\
    list\\n\" +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ M\")\n                                && infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                                && infoBlock.contains(\"Time created:\"\
    )\n                                && infoBlock.contains(\"Time last edit:\"))\
    \ {\n                            return CheckResult.correct();\n             \
    \           }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Editing person is not working\");\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"organization\\n\"\
    \ +\n                        \"Pizza Shop\\n\" +\n                        \"Wall\
    \ St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n     \
    \               \"list\\n\" +\n                    \"1\\n\" +\n              \
    \      \"edit\\n\" +\n                        \"address\\n\" +\n             \
    \           \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n          \
    \          \"list\\n\" +\n                    \"1\\n\" +\n                   \
    \ \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Organization name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St 2\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Editing organization is\
    \ not working\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"add\\n\" +\n                    \
    \    \"person\\n\" +\n                        \"John\\n\" +\n                \
    \        \"Smith\\n\" +\n                        \"\\n\" +\n                 \
    \       \"\\n\" +\n                        \"123 456 789\\n\" +\n            \
    \        \"add\\n\" +\n                        \"organization\\n\" +\n       \
    \                 \"PizzaNuts\\n\" +\n                        \"Wall St. 6\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"search\\n\" +\n                        \"pizz\\n\" +\n                \
    \    \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 4);\n              \
    \      if (feedback != null) return feedback;\n    \n                    \n  \
    \                  for (String infoBlock : blocks) {\n                       \
    \ if (infoBlock.contains(\"Pizza Shop\")\n                                && infoBlock.contains(\"\
    PizzaNuts\")\n                                && !infoBlock.contains(\"John\"\
    )) {\n                            return CheckResult.correct();\n            \
    \            }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"organization\\n\" +\n    \
    \                    \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\\
    n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n              \
    \      \"add\\n\" +\n                        \"person\\n\" +\n               \
    \         \"John\\n\" +\n                        \"Smith\\n\" +\n            \
    \            \"\\n\" +\n                        \"\\n\" +\n                  \
    \      \"123 456 789\\n\" +\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"PizzaNuts\\n\" +\n\
    \                        \"Wall St. 6\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"search\\n\" +\n                 \
    \       \"s\\n\" +\n                    \"1\\n\" +\n                    \"menu\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Pizza Shop\")\n                                && infoBlock.contains(\"John Smith\"\
    )\n                                && infoBlock.contains(\"PizzaNuts\")) {\n \
    \                           return CheckResult.correct();\n                  \
    \      }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n        new TestCase<TestClue>()\n            .setInput(\n                \"\
    add\\n\" +\n                    \"organization\\n\" +\n                    \"\
    Pizza Shop\\n\" +\n                    \"Wall St. 1\\n\" +\n                 \
    \   \"+0 (123) 456-789-9999\\n\" +\n                \"add\\n\" +\n           \
    \         \"person\\n\" +\n                    \"John\\n\" +\n               \
    \     \"Smith\\n\" +\n                    \"\\n\" +\n                    \"\\\
    n\" +\n                    \"123 456 789\\n\" +\n                \"add\\n\" +\n\
    \                    \"organization\\n\" +\n                    \"PizzaNuts\\\
    n\" +\n                    \"Wall St. 6\\n\" +\n                    \"+0 (123)\
    \ 456-781-9999\\n\" +\n                \"search\\n\" +\n                    \"\
    789\\n\" +\n                \"1\\n\" +\n                \"menu\\n\" +\n      \
    \          \"exit\")\n            .setAttach(new TestClue(output -> {\n      \
    \          String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                var feedback = splitActionsFeedback(blocks.length, 4);\n \
    \               if (feedback != null) return feedback;\n\n                for\
    \ (String infoBlock : blocks) {\n                    if (infoBlock.contains(\"\
    Pizza Shop\")\n                            && infoBlock.contains(\"John Smith\"\
    )\n                            && !infoBlock.contains(\"PizzaNuts\")) {\n    \
    \                    return CheckResult.correct();\n\n                    } else\
    \ if (infoBlock.contains(\"+0 (123) 456-789-9999\")\n                        \
    \    && infoBlock.contains(\"123 456 789\")\n                            && !infoBlock.contains(\"\
    +0 (123) 456-781-9999\")) {\n                        return CheckResult.correct();\n\
    \                    }\n                }\n                return new CheckResult(false,\n\
    \                        \"Search by phone number is not working\");\n       \
    \     }))\n        );\n    }\n\n    @Override\n    public CheckResult check(String\
    \ reply, TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/20391#comment
status: Unchecked
record: -1
